import com.github.spotbugs.snom.SpotBugsTask

plugins {
    id 'fabric-loom' version '1.9-SNAPSHOT'
    id 'maven-publish'
    id 'io.freefair.lombok' version '8.6'
    id 'com.github.spotbugs-base' version '6.0.14'
    id 'com.diffplug.spotless' version '6.25.0'
    id 'me.modmuss50.mod-publish-plugin' version "0.5.1"
}

def local = !System.getenv().containsKey("GITHUB_RUN_NUMBER")

version = "${project.mod_version}-${project.minecraft_version}-${local ? 'local' : "build.${System.getenv("GITHUB_RUN_NUMBER")}"}"
group = project.maven_group

repositories {
    mavenCentral()
    maven {
        url = "https://api.modrinth.com/maven"
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation libs.fabric.loader

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation libs.fabric.api
    modImplementation include ("maven.modrinth:midnightlib:${project.midnightlib_version}")
}

tasks.register("spotbugs", SpotBugsTask) { task ->
    sourceSets.each {
        task.sourceDirs.from(task.sourceDirs.files, it.allSource.sourceDirectories)
        task.classDirs.from(task.classDirs.files, it.output)
        task.auxClassPaths.from(task.auxClassPaths.files, it.compileClasspath)
    }
    excludeFilter = file("spotbugs.xml")
    ignoreFailures = true
    reports {
        if (local) {
            html {
                required = true
                outputLocation = file("$buildDir/reports/spotbugs/main/spotbugs.html")
                stylesheet = 'fancy-hist.xsl'
            }
        } else {
            sarif {
                required = true
                outputLocation = file("$buildDir/reports/spotbugs/main/spotbugs.sarif")
            }
        }
    }
}

spotless {
    java {
        removeUnusedImports()
        trimTrailingWhitespace()
        formatAnnotations()
        importOrder('', 'java|javax', '\\#')
    }
}

processResources {
    def map = [
            "version": project.version,
            "loader_version": libs.fabric.loader.get().version
    ]
    inputs.properties(map)
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand map
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

sourcesJar {
    exclude {
        sourceSets.main.allSource.contains it.file
    }
    from delombok
}

/*
// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId 'linkart'
            from components.java
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/constellation-mc/Linkart"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

publishMods {
    file = remapJar.archiveFile
    additionalFiles.from(remapSourcesJar.archiveFile)

    changelog = file("CHANGELOG.md").text
    type = ReleaseType.valueOf(providers.environmentVariable("VERSION_TYPE").getOrElse("BETA"))
    modLoaders.add("fabric")

    displayName = "${project.mod_version} (${project.minecraft_version})"

    modrinth {
        projectId = "sc4Mu9Zu"
        accessToken = providers.environmentVariable("MODRINTH_TOKEN")
        minecraftVersions.add("${project.minecraft_version}")
        minecraftVersions.add("1.21")

        requires("fabric-api")
        embeds("midnightlib")
    }
    curseforge {
        projectId = "622736"
        accessToken = providers.environmentVariable("CURSEFORGE_TOKEN")
        minecraftVersions.add("${project.minecraft_version}")
        minecraftVersions.add("1.21")

        requires("fabric-api")
        embeds("midnightlib")
    }
    github {
        repository = "constellation-mc/Linkart"
        accessToken = providers.environmentVariable("GITHUB_TOKEN")
        commitish = providers.environmentVariable("GITHUB_SHA").getOrElse("${project.minecraft_version}-fabric")

        type = STABLE
    }

    dryRun = local
}
*/